# Endeavor by Team210 - 64k intro by Team210 at Revision 2k19
# Copyright (C) 2018  Alexander Kraus <nr4@z10.info>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

import struct
import numpy as np
import matplotlib.pyplot as plt

data = [19648,22160,20704,22096,21248,22080,21568,22336,21760,21056,22016,22368,22208,22256,22336,22304,22432,22224,22576,20480,22672,22288,22696,22032,22776,20992,22872,21024,22952,20896,23048,22064,23104,22240,23168,21120,23232,22352,23328,15360,0,46421,0,13653,0,16384,0,0,15360,13896,16767,0,0,15360,17170,17892,15360,47104,0,0,0,0,15360,0,0,15360,13896,17892,15360,0,0,15360,17170,0,15360,0,0,15360,17170,16767,16384,48128,0,48128,15360,46421,0,0,0,0,15360,0,0,15360,16968,17892,15360,0,48128,15360,48128,0,15360,0,0,15360,17590,13896,0,0,15360,0,0,15360,16347,15542,0,15360,0,0,15360,0,15360,48128,0,48128,48128,0,15360,0,0,15360,13896,16968,15360,0,0,0,13653,0,15360,0,0,15360,17691,17490,0,0,0,15360,13653,46421,14677,47445,15360,0,0,15360,0,15360,47104,0,14336,0,0,15360,0,0,15360,17691,17490,15360,46421,46421,13653,13653,15360,0,0,15360,0,15360,15360,0,15360,48128,0,15360,0,0,15360,0,16767,15360,46421,0,13653,0,0,0,0,0,15360,0,0,15360,13896,17892,0,0,15360,0,0,15360,17691,17490,15360,15360,0,15360,48128,0,15360,0,0,15360,16347,0,16384,48128,0,48128,15360,15360,0,15360,15360,0,15360,0,0,15360,16968,0,16896,23488,23544,23604,22336,22096,22032,22224,21056,21024,20992,22288,22224,20480,20896,20480,22224,22160,22064,20480,20896,20480,22240,22304,21120,22096,22240,22080,22096,22032,22368,22256,22352,22304]

result = [19.0, 105.0, 39.0, 101.0, 56.0, 100.0, 68.0, 116.0, 80.0, 50.0, 96.0, 118.0, 108.0, 111.0, 116.0, 114.0, 122.0, 109.0, 134.0, 32.0, 146.0, 113.0, 149.0, 97.0, 159.0, 48.0, 171.0, 49.0, 181.0, 45.0, 193.0, 99.0, 200.0, 110.0, 208.0, 52.0, 216.0, 117.0, 228.0, 1.0, 0.0, -0.333251953125, 0.0, 0.333251953125, 0.0, 2.0, 0.0, 0.0, 1.0, 0.392578125, 2.748046875, 0.0, 0.0, 1.0, 3.53515625, 5.890625, 1.0, -0.5, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.392578125, 5.890625, 1.0, 0.0, 0.0, 1.0, 3.53515625, 0.0, 1.0, 0.0, 0.0, 1.0, 3.53515625, 2.748046875, 2.0, -1.0, 0.0, -1.0, 1.0, -0.333251953125, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 3.140625, 5.890625, 1.0, 0.0, -1.0, 1.0, -1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 4.7109375, 0.392578125, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.9638671875, 1.177734375, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, -1.0, 0.0, -1.0, -1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.392578125, 3.140625, 1.0, 0.0, 0.0, 0.0, 0.333251953125, 0.0, 1.0, 0.0, 0.0, 1.0, 5.10546875, 4.3203125, 0.0, 0.0, 0.0, 1.0, 0.333251953125, -0.333251953125, 0.66650390625, -0.66650390625, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, -0.5, 0.0, 0.5, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 5.10546875, 4.3203125, 1.0, -0.333251953125, -0.333251953125, 0.333251953125, 0.333251953125, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, -1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 2.748046875, 1.0, -0.333251953125, 0.0, 0.333251953125, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.392578125, 5.890625, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 5.10546875, 4.3203125, 1.0, 1.0, 0.0, 1.0, -1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.9638671875, 0.0, 2.0, -1.0, 0.0, -1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 3.140625, 0.0, 3.0, 248.0, 255.0, 269.0, 116.0, 101.0, 97.0, 109.0, 50.0, 49.0, 48.0, 113.0, 109.0, 32.0, 45.0, 32.0, 109.0, 105.0, 99.0, 32.0, 45.0, 32.0, 110.0, 114.0, 52.0, 101.0, 110.0, 100.0, 101.0, 97.0, 118.0, 111.0, 117.0, 114.0]

for i in range(len(data)):
    d = data[i]
    sign = np.floor(float(d)/32768.)
    rsign =  d>>15
    #print("sign is:", sign, "should be:", rsign)
    exponent = np.floor(float(d)/1024.-sign*32)
    rexponent = (d>>10)&0b011111
    #print("exponent is:", exponent, "should be:", rexponent)
    significand = float(d)-sign*32768.-exponent*1024.
    rsignificand = d & (2**10 - 1)
    #print("significand is:", significand, "should be:", rsignificand)
    
    num = 0. 
    rnum = 0.
    if exponent == 0:
        num = (-1.)**sign * 2.**(-24) * significand
        rnum = (-1.)**rsign * 2.**(-24) * rsignificand
    else:
        num = (-1.)**sign * (1. + significand * 2.**(-10)) * 2.**(exponent-15.)
        rnum = (-1.)**rsign * (1. + rsignificand * 2.**(-10)) * 2.**(rexponent-15.)
    
    if num != result[i]:
        print("Mismatch:", num, "should be", result[i])
