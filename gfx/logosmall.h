/* Generated with shader-compressor by NR4/Team210. */
#ifndef LOGOSMALL_H
#define LOGOSMALL_H
const char * logosmall_frag =
"/* Endeavor by Team210 - 64k intro by Team210 at Revision 2k19\n"
" * Copyright (C) 2019  Alexander Kraus <nr4@z10.info>\n"
" *\n"
" * This program is free software: you can redistribute it and/or modify\n"
" * it under the terms of the GNU General Public License as published by\n"
" * the Free Software Foundation, either version 3 of the License, or\n"
" * (at your option) any later version.\n"
" *\n"
" * This program is distributed in the hope that it will be useful,\n"
" * but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
" * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
" * GNU General Public License for more details.\n"
" *\n"
" * You should have received a copy of the GNU General Public License\n"
" * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"
" */\n"
" \n"
"#version 130\n"
"\n"
"uniform float iTime;\n"
"uniform vec2 iResolution;\n"
"\n"
"// Global constants\n"
"const float pi = acos(-1.);\n"
"const vec3 c = vec3(1.0, 0.0, -1.0);\n"
"float a = 1.0;\n"
"\n"
"const float r = .5;\n"
"\n"
"// Hash function\n"
"void rand(in vec2 x, out float num)\n"
"{\n"
"    num = fract(sin(dot(sign(x)*abs(x) ,vec2(12.9898,78.233)))*43758.5453);\n"
"}\n"
"\n"
"// Arbitrary-frequency 2D noise\n"
"void lfnoise(in vec2 t, out float num)\n"
"{\n"
"    vec2 i = floor(t);\n"
"    t = fract(t);\n"
"    //t = ((6.*t-15.)*t+10.)*t*t*t;  // TODO: add this for slower perlin noise\n"
"    t = smoothstep(c.yy, c.xx, t); // TODO: add this for faster value noise\n"
"    vec2 v1, v2;\n"
"    rand(i, v1.x);\n"
"    rand(i+c.xy, v1.y);\n"
"    rand(i+c.yx, v2.x);\n"
"    rand(i+c.xx, v2.y);\n"
"    v1 = c.zz+2.*mix(v1, v2, t.y);\n"
"    num = mix(v1.x, v1.y, t.x);\n"
"}\n"
"\n"
"// Multi-frequency 2D noise\n"
"void mfnoise(in vec2 x, in float fmin, in float fmax, in float alpha, out float num)\n"
"{\n"
"    num = 0.;\n"
"    float a = 1., nf = 0., buf;\n"
"    for(float f = fmin; f<fmax; f = f*2.)\n"
"    {\n"
"        lfnoise(f*x, buf);\n"
"        num += a*buf;\n"
"        a *= alpha;\n"
"        nf += 1.;\n"
"    }\n"
"    num *= (1.-alpha)/(1.-pow(alpha, nf));\n"
"}\n"
"\n"
"// Stroke\n"
"void stroke(in float d0, in float s, out float d)\n"
"{\n"
"    d = abs(d0)-s;\n"
"}\n"
"\n"
"// Add distance functions with materials\n"
"void add(in vec2 sda, in vec2 sdb, out vec2 dst)\n"
"{\n"
"    dst = mix(sda, sdb, step(sdb.x, sda.x));\n"
"}\n"
"\n"
"void scene_bounds(in vec3 x, out vec2 s)\n"
"{\n"
"    vec2 sdmars = c.yx; // Mars has material 1\n"
"    sdmars.x = length(x)-r;\n"
"    \n"
"    vec2 sdphobos = 2.*c.yx; // Phobos has material 2\n"
"    float phi = .04*iTime, \n"
"        theta = .4*iTime, \n"
"        rtraj = r*1.2, rmoon = .07*r;\n"
"    sdphobos.x = length(x-rtraj*vec3(cos(theta)*cos(phi),\n"
"                                     cos(theta)*sin(phi),\n"
"                                     sin(theta)))-rmoon;\n"
"    add(sdmars, sdphobos, s);\n"
"    \n"
"    vec2 sddeimos = 3.*c.yx; // Deimos has material 3\n"
"    theta = (theta + 13.1)*1.5;\n"
"    phi = (phi - 6.22)*1.5;\n"
"    sddeimos.x = length(x-rtraj*vec3(cos(theta)*cos(phi),\n"
"                                     cos(theta)*sin(phi),\n"
"                                     sin(theta)))-.5*rmoon;\n"
"    add(s, sddeimos, s);\n"
"}\n"
"\n"
"void planet(in vec3 x, out float d)\n"
"{\n"
"    vec2 texcoord = vec2(sqrt(2./(1./r-x.z)),sqrt(2./(1./r-x.z)))*x.xy;\n"
"    mfnoise(12.*texcoord-.2*iTime*c.xy, .9,250.,.45,d);\n"
"    stroke(d,.1, d);\n"
"    \n"
"    d = length(x)-r-mix(0.,.0003,smoothstep(-.05,.05,d))-.002*d;\n"
"}\n"
"\n"
"void planet_normal(in vec3 x, out vec3 n)\n"
"{\n"
"    float s, dx=1.e-4;\n"
"    planet(x,s);\n"
"    planet(x+dx*c.xyy,n.x);\n"
"    planet(x+dx*c.yxy,n.y);\n"
"    planet(x+dx*c.yyx,n.z);\n"
"    n = normalize(n-s);\n"
"}\n"
"\n"
"void phobos(in vec3 x, out float d)\n"
"{\n"
"    float phi = .04*iTime, \n"
"        theta = .4*iTime, \n"
"        rtraj = r*1.2, rmoon = .07*r;\n"
"    x -= rtraj*vec3(cos(theta)*cos(phi),\n"
"                                     cos(theta)*sin(phi),\n"
"                                     sin(theta));\n"
"    vec2 texcoord = vec2(sqrt(2./(1./rmoon-x.z)),sqrt(2./(1./rmoon-x.z)))*x.xy;\n"
"    mfnoise(12.*texcoord-.01*iTime*c.xy, 17.4,550.,.45,d);\n"
"    stroke(d,.01, d);\n"
"    \n"
"    d = length(x)-rmoon-.01*d;\n"
"}\n"
"\n"
"void phobos_normal(in vec3 x, out vec3 n)\n"
"{\n"
"    float s, dx=1.e-4;\n"
"    phobos(x,s);\n"
"    phobos(x+dx*c.xyy,n.x);\n"
"    phobos(x+dx*c.yxy,n.y);\n"
"    phobos(x+dx*c.yyx,n.z);\n"
"    n = normalize(n-s);\n"
"}\n"
"\n"
"void deimos(in vec3 x, out float d)\n"
"{\n"
"    float phi = .04*iTime, \n"
"        theta = .4*iTime, \n"
"        rtraj = r*1.2, rmoon = .07*r*.5;\n"
"    theta = (theta + 13.1)*1.5;\n"
"    phi = (phi - 6.22)*1.5;\n"
"    x -= rtraj*vec3(cos(theta)*cos(phi),\n"
"                                     cos(theta)*sin(phi),\n"
"                                     sin(theta));\n"
"    vec2 texcoord = vec2(sqrt(2./(1./rmoon-x.z)),sqrt(2./(1./rmoon-x.z)))*x.xy;\n"
"    mfnoise(12.*texcoord-.01*iTime*c.xy, 17.9,550.,.45,d);\n"
"    stroke(d,.01, d);\n"
"    \n"
"    d = length(x)-rmoon-.01*d;\n"
"}\n"
"\n"
"void deimos_normal(in vec3 x, out vec3 n)\n"
"{\n"
"    float s, dx=1.e-4;\n"
"    deimos(x,s);\n"
"    deimos(x+dx*c.xyy,n.x);\n"
"    deimos(x+dx*c.yxy,n.y);\n"
"    deimos(x+dx*c.yyx,n.z);\n"
"    n = normalize(n-s);\n"
"}\n"
"\n"
"void planet_texture(in vec2 x, out vec3 col)\n"
"{\n"
"    vec3 light_orange = vec3(1.00,0.69,0.05),\n"
"        orange = vec3(0.95,0.45,0.01),\n"
"        dark_orange = vec3(0.98,0.73,0.01);\n"
"    \n"
"    //rock like appearance\n"
"    float d;\n"
"    mfnoise(-50.+x-.2*iTime*c.xy, 1.,250.,.65,d);\n"
"	col = mix(vec3(0.19,0.02,0.00), vec3(0.91,0.45,0.02), .5+.5*d);\n"
"    \n"
"    // big structures\n"
"    mfnoise(x-.2*iTime*c.xy, .9,250.,.45,d);\n"
"    stroke(d,.04, d);\n"
"    col = mix(mix(.8*vec3(0.99,0.49,0.02),c.yyy,clamp(.2-.5*x.y/12.,0.,1.)), col, smoothstep(-.05,.05,d));\n"
"    \n"
"    col = mix(col, vec3(0.15,0.05,0.00), clamp(.2-.5*x.y/12.,0.,1.));\n"
"}\n"
"\n"
"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n"
"{\n"
"    a = iResolution.x/iResolution.y;\n"
"    vec2 uv = fragCoord/iResolution.yy-0.5*vec2(a, 1.0);\n"
"    vec3 col = c.yyy;\n"
"    \n"
"    fragColor = vec4(col,1.0);\n"
"    //if(length(uv)-r*1.154<0.)\n"
"    {	\n"
"        vec3 o = c.yyx, t = vec3(uv,0.), dir = normalize(t-o), x, n;\n"
"        float d;\n"
"        vec2 s;\n"
"        \n"
"        // trace planet bounding sphere. Nobody will notice \n"
"        // the wrong surface at the border of the projection\n"
"        for(int i=0; i<250; ++i)\n"
"        {\n"
"            x = o + d * dir;\n"
"            scene_bounds(x, s);\n"
"            if(s.x<1.e-4)break;\n"
"            if(d>1.5)\n"
"            {\n"
"                col += .15*vec3(0.97,0.58,0.00)*(1.-smoothstep(r*1.1,r*1.24, length(uv)));\n"
"                fragColor = vec4(col, 1.);\n"
"                return;\n"
"            }\n"
"            d += s.x;\n"
"        }\n"
"\n"
"        vec3 light = x+normalize(vec3(0.,1.,1.));\n"
"        if(s.y == 1.)\n"
"	        planet_normal(x,n);\n"
"        else if(s.y == 2.)\n"
"            phobos_normal(x,n);\n"
"        else if(s.y == 3.)\n"
"            deimos_normal(x,n);\n"
"        float dln = max(1., dot(light,n)),\n"
"            drv = max(0., dot(reflect(light,n),dir));\n"
"        if(s.y == 1.)\n"
"        {\n"
"            vec2 texcoord = vec2(sqrt(2./(1./r-x.z)),sqrt(2./(1./r-x.z)))*x.xy;\n"
"            planet_texture(12.*texcoord, col);\n"
"            col = -vec3(0.0,0.13,0.10)\n"
"            + .4*col*dln\n"
"            + 1.3*col*pow(drv,1.);\n"
"            \n"
"            // atmosphere glow\n"
"            //d = abs(d-.49)+.5;\n"
"            \n"
"            \n"
"        }\n"
"        else if(s.y == 2.)\n"
"            col = .05*vec3(0.66,0.54,0.46)*dln+.2*vec3(0.97,0.80,0.67)*pow(drv,1.);\n"
"        else if(s.y == 3.)\n"
"            col = .05*vec3(0.66,0.54,0.46)*dln+.2*vec3(0.36,0.36,0.36)*pow(drv,1.);\n"
"    }\n"
"    \n"
"    //else\n"
"    {\n"
"        // Stars\n"
"        \n"
"        // Glow effect\n"
"    }\n"
"    \n"
"    col = clamp(col, 0., 1.);\n"
"    fragColor = vec4(col,1.0);\n"
"}\n"
"\n"
"void main()\n"
"{\n"
"    mainImage(gl_FragColor, gl_FragCoord.xy);\n"
"}\n"
"\n"
;
#endif
